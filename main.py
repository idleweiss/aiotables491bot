import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import os
from dotenv import load_dotenv

load_dotenv()
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="üìÜ –ó–∞–≤—Ç—Ä–∞")],
            [KeyboardButton(text="üóìÔ∏è –í—Å—è –Ω–µ–¥–µ–ª—è"), KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
    )
    return keyboard

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
SCHEDULE = {
    0: {  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        "9:00": [
            {"type": "–ª–µ–∫", "subject": "–í–´–°–®. –ú–ê–¢–ï–ú–ê–¢", "teacher": "–®–∞–ø–æ–≤–∞–ª–æ–≤ –ï.–í.", "room": "451", "parity": "all"}
        ],
        "10:50": [
            {"type": "–ø—Ä", "subject": "–≠–ö –ü–û –§–ö –ò –°–ü–û–†–¢–£", "teacher": "", "room": "", "parity": "all"}
        ],
        "12:40": [
            {"type": "–ª–µ–∫", "subject": "–í–í–ï–î. –í –°–ü–ï–¶", "teacher": "–û—Ö–æ—á–∏–Ω—Å–∫–∏–π –ú.–ù.", "room": "318", "parity": "even"}
        ]
    },
    1: {  # –í—Ç–æ—Ä–Ω–∏–∫
        "9:00": [
            {"type": "–ø—Ä", "subject": "–ò–ù. –Ø–ó.", "teacher": "–ù–∏–∫–æ–ª–∞–µ–≤–∞ –û.–í.", "room": "317*", "parity": "all"}
        ],
        "10:50": [
            {"type": "–ø—Ä", "subject": "–í–´–°–®. –ú–ê–¢–ï–ú–ê–¢", "teacher": "–ü–µ–ª–µ–≤–∏–Ω–∞ –ò.–í.", "room": "418*", "parity": "all"}
        ]
    },
    2: {  # –°—Ä–µ–¥–∞
        "9:00": [
            {"type": "–ª–µ–∫", "subject": "–ò–°–¢–û–†–ò–Ø", "teacher": "–°–∞–≤–∏–Ω–æ–≤ –ú.–ê.", "room": "450", "parity": "all"}
        ],
        "10:50": [
            {"type": "–ø—Ä", "subject": "–≠–ö –ü–û –§–ö –ò –°–ü–û–†–¢–£", "teacher": "", "room": "", "parity": "all"}
        ],
        "12:40": [
            {"type": "–ª–µ–∫", "subject": "–≠–ö–û–õ–û–ì–ò–Ø", "teacher": "–ü–µ—Ç—Ä–æ–≤ –°.–ö.", "room": "316", "parity": "odd"},
            {"type": "–ª–µ–∫", "subject": "–í–í–ï–î–ï–ù–ò–ï –í –ò–¢", "teacher": "–©–µ—Ä–±–∞–∫–æ–≤–∞ –õ.–í.", "room": "314", "parity": "even"}
        ],
        "14:55": [
            {"type": "–ø—Ä", "subject": "–í–´–°–®. –ú–ê–¢–ï–ú–ê–¢", "teacher": "–ü–µ–ª–µ–≤–∏–Ω–∞ –ò.–í.", "room": "456", "parity": "all"}
        ]
    },
    3: {  # –ß–µ—Ç–≤–µ—Ä–≥
        "9:00": [
            {"type": "–ª–∞–±", "subject": "–≠–ö–û–õ–û–ì–ò–Ø", "teacher": "–õ—É–±—è–Ω—á–µ–Ω–∫–æ –ê.–ê.", "room": "384–∞", "parity": "odd"},
            {"type": "–ø—Ä", "subject": "–í–í–ï–î–ï–ù–ò–ï –í –ò–¢", "teacher": "–ö–æ–≤–∞–ª—å –ê.–ê.", "room": "–í–¶ 282", "parity": "even"}
        ],
        "10:50": [
            {"type": "–ø—Ä", "subject": "–ò–°–¢–û–†–ò–Ø", "teacher": "–û—Ö–æ—á–∏–Ω—Å–∫–∏–π –î.–ú.", "room": "456", "parity": "all"}
        ],
        "12:40": [
            {"type": "–ø—Ä", "subject": "–ù–ê–ß–ï–†–¢–ê–¢. –ì–ï–û–ú", "teacher": "–†–∞–∫–∏—Ç—Å–∫–∞—è –ú.–í.", "room": "505*", "parity": "all"}
        ]
    },
    4: {  # –ü—è—Ç–Ω–∏—Ü–∞
        "9:00": [
            {"type": "–ª–µ–∫", "subject": "–§–ò–õ–û–°–û–§–ò–Ø", "teacher": "–í–µ—Ä–µ—Å–æ–≤–∞ –ê.–ê.", "room": "429*", "parity": "odd"},
            {"type": "–ø—Ä", "subject": "–§–ò–õ–û–°–û–§–ò–Ø", "teacher": "–í–µ—Ä–µ—Å–æ–≤–∞ –ê.–ê.", "room": "418*", "parity": "even"}
        ],
        "10:50": [
            {"type": "–ª–µ–∫", "subject": "–ù–ê–ß–ï–†–¢–ê–¢. –ì–ï–û–ú", "teacher": "–†–∞–∫–∏—Ç—Å–∫–∞—è –ú.–í.", "room": "429*", "parity": "all"}
        ],
        "12:40": [
            {"type": "–ø—Ä", "subject": "–û–°–ù –†–û–° –ì–û–°", "teacher": "–ö–∞–Ω–∞—Ç–∞–µ–≤ –î.–í.", "room": "563*", "parity": "odd"},
            {"type": "–ª–µ–∫", "subject": "–û–°–ù –†–û–° –ì–û–°", "teacher": "–ö–∞–Ω–∞—Ç–∞–µ–≤ –î.–í.", "room": "331*", "parity": "even"}
        ]
    },
    5: {  # –°—É–±–±–æ—Ç–∞
        "10:50": [
            {"type": "–ª–µ–∫", "subject": "–§–ö –ò –°–ü–û–†–¢", "teacher": "–ü–µ—Ç—Ä–æ–≤ –ê.–ë.", "room": "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ", "parity": "odd"}
        ]
    }
}

def get_academic_year_start(current_year=None):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ (1 —Å–µ–Ω—Ç—è–±—Ä—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞)
    """
    if current_year is None:
        current_year = datetime.now().year
    
    return datetime(current_year, 9, 1)

def get_week_parity(date=None):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ (1 —Å–µ–Ω—Ç—è–±—Ä—è)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'even' (—á–µ—Ç–Ω–∞—è) –∏–ª–∏ 'odd' (–Ω–µ—á–µ—Ç–Ω–∞—è)
    """
    if date is None:
        date = datetime.now()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞
    current_year = date.year
    september_1 = get_academic_year_start(current_year)
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–æ 1 —Å–µ–Ω—Ç—è–±—Ä—è, –±–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—á–µ–±–Ω—ã–π –≥–æ–¥
    if date < september_1:
        september_1 = get_academic_year_start(current_year - 1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
    days_difference = (date - september_1).days
    
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    week_number = days_difference // 7
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å
    if week_number % 2 == 0:
        return "odd"  # –Ω–µ—á–µ—Ç–Ω–∞—è
    else:
        return "even"  # —á–µ—Ç–Ω–∞—è

def get_russian_weekday(date):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    """
    days = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫", 
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return days[date.weekday()]

def format_date(date):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ä—É—Å—Å–∫–æ–º —Å—Ç–∏–ª–µ
    """
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    
    return f"{date.day} {months[date.month]} {date.year} –≥–æ–¥–∞"

def get_schedule_for_day(weekday, parity):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ —á–µ—Ç–Ω–æ—Å—Ç–∏
    """
    if weekday not in SCHEDULE:
        return None
    
    day_schedule = SCHEDULE[weekday]
    result = []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ –ø–æ—Ä—è–¥–∫—É
    sorted_times = sorted(day_schedule.keys(), key=lambda x: datetime.strptime(x, "%H:%M"))
    
    for time in sorted_times:
        lessons = day_schedule[time]
        for lesson in lessons:
            if lesson["parity"] == "all" or lesson["parity"] == parity:
                result.append({
                    "time": time,
                    "type": lesson["type"],
                    "subject": lesson["subject"],
                    "teacher": lesson["teacher"],
                    "room": lesson["room"]
                })
    
    return result

def format_schedule(schedule, parity_russian):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
    """
    if not schedule:
        return f"üéâ –í —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç! –û—Ç–¥—ã—Ö–∞–π—Ç–µ!"
    
    result = f"üìö <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({parity_russian} –Ω–µ–¥–µ–ª—è):</b>\n\n"
    
    for lesson in schedule:
        result += f"üïí <b>{lesson['time']}</b>\n"
        result += f"   üìñ {lesson['type']} {lesson['subject']}\n"
        if lesson['teacher']:
            result += f"   üë®‚Äçüè´ {lesson['teacher']}\n"
        if lesson['room']:
            result += f"   üè´ {lesson['room']}\n"
        result += "\n"
    
    return result

def get_current_week_dates():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —Å—É–±–±–æ—Ç–∞)
    """
    today = datetime.now()
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    monday = today - timedelta(days=today.weekday())
    
    week_dates = []
    for i in range(6):  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —Å—É–±–±–æ—Ç–∞
        week_dates.append(monday + timedelta(days=i))
    
    return week_dates

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )
    
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
async def cmd_today_button(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
    """
    current_date = datetime.now()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    weekday = current_date.weekday()
    weekday_russian = get_russian_weekday(current_date)
    formatted_date = format_date(current_date)
    week_parity = get_week_parity(current_date)
    parity_russian = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_parity == "odd" else "—á–µ—Ç–Ω–∞—è"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today_schedule = get_schedule_for_day(weekday, week_parity)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        f"üìÜ <b>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b> {weekday_russian}\n"
        f"üóìÔ∏è <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
        f"üéì <b>–£—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è:</b> {parity_russian}\n"
        f"<i>(–æ—Ç—Å—á–µ—Ç —Å 1 —Å–µ–Ω—Ç—è–±—Ä—è)</i>\n\n"
    )
    
    if today_schedule:
        response += format_schedule(today_schedule, parity_russian)
    else:
        response += "üéâ –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç! –û—Ç–¥—ã—Ö–∞–π—Ç–µ!"
    
    await message.answer(response, parse_mode="HTML")

@dp.message(lambda message: message.text == "üìÜ –ó–∞–≤—Ç—Ä–∞")
async def cmd_tomorrow_button(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤—Ç—Ä–∞"
    """
    tomorrow_date = datetime.now() + timedelta(days=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    weekday = tomorrow_date.weekday()
    weekday_russian = get_russian_weekday(tomorrow_date)
    formatted_date = format_date(tomorrow_date)
    week_parity = get_week_parity(tomorrow_date)
    parity_russian = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_parity == "odd" else "—á–µ—Ç–Ω–∞—è"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    tomorrow_schedule = get_schedule_for_day(weekday, week_parity)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n"
        f"üìÜ <b>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b> {weekday_russian}\n"
        f"üóìÔ∏è <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
        f"üéì <b>–£—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è:</b> {parity_russian}\n\n"
    )
    
    if tomorrow_schedule:
        response += format_schedule(tomorrow_schedule, parity_russian)
    else:
        response += "üéâ –ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç! –û—Ç–¥—ã—Ö–∞–π—Ç–µ!"
    
    await message.answer(response, parse_mode="HTML")

@dp.message(lambda message: message.text == "üóìÔ∏è –í—Å—è –Ω–µ–¥–µ–ª—è")
async def cmd_week_button(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Å—è –Ω–µ–¥–µ–ª—è"
    """
    current_date = datetime.now()
    week_parity = get_week_parity(current_date)
    parity_russian = "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_parity == "odd" else "—á–µ—Ç–Ω–∞—è"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    week_dates = get_current_week_dates()
    
    response = f"üìö <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({parity_russian} –Ω–µ–¥–µ–ª—è):</b>\n\n"
    
    for i, date in enumerate(week_dates):
        day_schedule = get_schedule_for_day(i, week_parity)
        day_name = get_russian_weekday(date)
        formatted_day_date = format_date(date)
        
        response += f"üìÜ <b>{day_name} ({formatted_day_date}):</b>\n"
        
        if day_schedule:
            for lesson in day_schedule:
                room_info = f" - {lesson['room']}" if lesson['room'] else ""
                response += f"   üïí {lesson['time']} - {lesson['type']} {lesson['subject']}{room_info}\n"
        else:
            response += f"   üéâ –ü–∞—Ä –Ω–µ—Ç\n"
        
        response += "\n"
    
    await message.answer(response, parse_mode="HTML")

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def cmd_about_button(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –±–æ—Ç–µ"
    """
    about_text = (
        "ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n"
        "üìö <b>–ë–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ –æ—Ç 1 —Å–µ–Ω—Ç—è–±—Ä—è\n\n"
        "üõ† <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n"
        "‚Ä¢ üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "‚Ä¢ üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ üî¢ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏\n\n"
        "‚öôÔ∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "‚Ä¢ –ß–µ—Ç–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç 1 —Å–µ–Ω—Ç—è–±—Ä—è\n"
        "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —á–µ—Ç–Ω—ã—Ö/–Ω–µ—á–µ—Ç–Ω—ã—Ö –Ω–µ–¥–µ–ª—å\n\n"
        "üìû –î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"
    )
    
    await message.answer(about_text, parse_mode="HTML")

@dp.message(Command("today"))
async def cmd_today(message: types.Message):
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /today
    """
    await cmd_today_button(message)

@dp.message(Command("tomorrow"))
async def cmd_tomorrow(message: types.Message):
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /tomorrow
    """
    await cmd_tomorrow_button(message)

@dp.message(Command("week"))
async def cmd_week(message: types.Message):
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /week
    """
    await cmd_week_button(message)

@dp.message(Command("about"))
async def cmd_about(message: types.Message):
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /about
    """
    await cmd_about_button(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    help_text = (
        "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n"
        "‚Ä¢ <b>üìÖ –°–µ–≥–æ–¥–Ω—è</b> - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <b>üìÜ –ó–∞–≤—Ç—Ä–∞</b> - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "‚Ä¢ <b>üóìÔ∏è –í—Å—è –Ω–µ–¥–µ–ª—è</b> - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ <b>‚ÑπÔ∏è –û –±–æ—Ç–µ</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"
    )
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
